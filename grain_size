'''
1. read image and define pixel size 
if needed to convert results into micros, not 
2. denoising, if required and threshold image to separate grains from boundaries
3. clean up image, if needded, erode, etc, and create a mask for grains
4. label grains in the masked image
5. measure the properities of each grain
6. output results into a csv file
'''

import cv2
import numpy as np
from matplotlib import pyplot as plt
from scipy import ndimage
from skimage import io, color, measure

#step 1
img = cv2.imread('/home/l33/Documents/spyder_bioimage/images/grains2.jpg',0)
pixel_to_um = 0.5
#1 pixel = 0.5 um or 500 nm

cropped_img = img[0:300,:]
cv2.imshow('raw',img)
cv2.imshow('cropped',cropped_img)

#step 2
plt.hist(img.flat, bins=100,range=(0,255))
ret, thresh = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)

cv2.imshow('threshold',thresh)

#step 3
kernel = np.ones((3,3),np.uint8)
eroded = cv2.erode(thresh, kernel, iterations = 1)
dilated = cv2.dilate(eroded, kernel, iterations = 1)

cv2.imshow('dilated image',dilated)

mask = dilated == 255

mask = thresh == 255
#compare the difference
io.imshow(mask)
#zoom in
io.imshow(mask[255:280,255:280])

#step 4
s = [[1,1,1],[1,1,1],[1,1,1]]#that is what imageJ use
label_mask, num_labels = ndimage.label(mask,structure=s)

img2 = color.label2rgb(label_mask,bg_label=0)

cv2.imshow('color label',img2)

#step 5
clusters = measure.regionprops(label_mask,img)

print(clusters[0].perimeter)

#step 6
propList = ['Area',
            'equivalent_diameter',
            'orientation',
            'MajorAxisLength',
            'MinorAxisLength',
            'Perimeter',
            'MinIntensity',
            'MeanIntensity',
            'MaxIntensity']
output_file = open('image_measurement.csv','w')
output_file.write((','+','.join(propList)+'\n'))

for cluster_props in clusters:
    output_file.write(str(cluster_props['Label']))
    for i,prop in enumerate(propList):
        if(prop=='Area'):
            to_print = cluster_props[prop]*pixel_to_um**2
        elif(prop=='orientation'):
            to_print = cluster_props[prop]*57.2958
        elif(prop.find('Intensity')<0):
            to_print = cluster_props[prop]
        output_file.write(','+str(to_print))
    output_file.write('\n')
    #print('Label: {} Area: {}'.format(prop.label))

#name 'pixels_to_um' is not defined
