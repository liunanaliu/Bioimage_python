from skimage import io, img_as_float, img_as_ubyte
from skimage.restoration import denoise_nl_means, estimate_sigma
import numpy as np
from matplotlib import pyplot as plt

img = img_as_float(io.imread('/home/l33/Documents/spyder_bioimage/images/BSE_Google_noisy.jpg'))

sigma_est = np.mean(estimate_sigma(img,multichannel=True))

denoise = denoise_nl_means(img, h=1.15 * sigma_est, fast_mode=True,patch_size=5, patch_distance=3,multichannel=True)
#no result, did not know why

plt.imshow(denoise,cmap='gray')
plt.imshow(img,cmap='gray')

denoise_ubyte = img_as_ubyte(denoise)
plt.imshow(denoise_ubyte,cmap='gray')
plt.hist(denoise_ubyte.flat,bins=100,range=(0,255))
#could also change the range to zoom in 

plt.hist(denoise_ubyte.flat,bins=100,range=(0,80))
segm1 = (denoise_ubyte <= 55)
segm2 = (denoise_ubyte > 55) & (denoise_ubyte <= 100)
segm3 = (denoise_ubyte > 110) & (denoise_ubyte <= 210)
segm4 = (denoise_ubyte > 210) 

all_segments = np.zeros((denoise_ubyte.shape[0], denoise_ubyte.shape[1], 3))

all_segments[segm1] = (1,0,0)
all_segments[segm2] = (0,1,0)
all_segments[segm3] = (0,0,1)
all_segments[segm4] = (1,1,0)

plt.imshow(all_segments)

from scipy import ndimage as nd
segm1_open = nd.binary_opening(segm1,np.ones((3,3)))
segm1_closed = nd.binary_closing(segm1_open,np.ones((3,3)))


#repeated for the rest 3 segm
all_segments_clean = np.zeros((denoise_ubyte.shape[0], denoise_ubyte.shape[1], 3))

all_segments_clean[segm1_closed] = (1,0,0)
all_segments[segm2] = (0,1,0)
all_segments[segm3] = (0,0,1)
all_segments[segm4] = (1,1,0)


plt.imshow(all_segments_clean)
