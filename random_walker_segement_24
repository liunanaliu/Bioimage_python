from skimage import io, img_as_float
import matplotlib.pyplot as plt
import numpy as np
from skimage.restoration import denoise_nl_means, estimate_sigma
#https://scikit-image.org/docs/stable/auto_examples/filters/plot_nonlocal_means.html#sphx-glr-auto-examples-filters-plot-nonlocal-means-py

img = img_as_float(io.imread('/home/l33/Documents/spyder_bioimage/images/Alloy_noisy.jpg'))

plt.hist(img.flat, bins=100,range=(0,1))


# estimate the noise standard deviation from the noisy image
sigma_est = np.mean(estimate_sigma(img, multichannel=True))


patch_kw = dict(patch_size=5,      # 5x5 patches
                patch_distance=6,  # 13x13 search area
                multichannel=True)

# slow algorithm
denoise_img = denoise_nl_means(img, h=1.15 * sigma_est, fast_mode=True,
                           **patch_kw)
#error, no idea???

plt.hist(denoise_img,bins=100,range=(0,1))

from skimage import exposure
eq_img = exposure.equalize_adapthist(denoise_img)

plt.imshow(eq_img,cmap='gray')
plt.hist(eq_img,bins=100,range=(0,1))

markers = np.zeros(im.shape,dtype=np.uint)
#based on hist
markers[(eq_img < 0.6) & (eq_img > 0.3)] = 1
markers[(eq_img < 0.99) & (eq_img > 0.8)] = 2 

plt.imshow(markers)

from skimage.segmentation import random_walker

labels = random_walker(eq_img,markers,beta=10,mode='bf')

plt.imshow(labels)

segm1 = (labels == 1)
segm2 = (labels == 2)

plt.imshow(segm1)
plt.imshow(segm2)

all_segments = np.zeros((eq_img.shape[0],eq_img.shape[1],3))

all_segments[segm1] = (1,0,0)
all_segments[segm2] = (0,1,0)

plt.imshow(all_segments)
