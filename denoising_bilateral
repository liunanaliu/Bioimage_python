#better than gaussian in most situations!!!
#bilateral filter
#edge preserving denoising filter
#replace each pixel value with a weighted average of nearby pixel values
#but take into account the variation of intensities to preserve edges

import cv2
img_gaussian_noise = cv2.imread('images/xxx.tif',0)

img = img_gaussian_noise

bilateral_cv2 = cv2.bilateralFilter(img,5,20,100,
                                    borderType=cv2.BORDER_CONSTANT)

#5 is d - diameter of each pixel neighbour used during filtering
#20 is sigmacolor - sigma of grey / color space
#100 is sigmaspace - large value means farther pixels influence each other
#increasing sigmaspace smooths larger features.

#skimage is slower, and not so recommend
from skimage.restoration import denoise_bilateral
bilateral_skimage = denoise_bilateral(img,sigma_color=0.05,
                                      sigma_spatial=15,
                                      multichannel=False)
                                      
