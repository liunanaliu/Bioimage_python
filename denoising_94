'''
most common denoising filters: ## for top 3 of most common
gaussian
bilateral##
total variation
wavelet denoising
anisotropic diffusion
non local means##
block matching and 3d filtering##
markov random field
new deep learning approaches, steill emerging
'''

import matplotlib.pyplot as plt
import pydicom

dataset = pydicom.dcmread('images/CT_small.dcm')

img = dataset.pixel_array

plt.imshow(img, cmap=plt.cm.bone)

plt.imsave('/home/l33/Documents/spyder_bioimage/images/dcm2tiff.tif', img, cmap='gray')
#KeyError: 'TIF'

################################################################
from skimage import img_as_float
from skimage.metrics import peak_signal_noise_ratio
import matplotlib.pyplot as plt
from skimage import io
from scipy import ndimage as nd

noisy_img = img_as_float(io.imread('images/MRI_noisy.tif'))

ref_img = img_as_float(io.imread('images/MRI_clean.tif'))

gaussian_img = nd.gaussian_filter(noisy_img, sigma=5)

#the higherr the sigma, the better effects of denoising, the more blurring of image

plt.imshow(noisy_img)
plt.imshow(gaussian_img)
plt.imshow(noisy_img, cmap='gray')
plt.imshow(gaussian_img, cmap='gray')

noise_psnr = peak_signal_noise_ratio(ref_img, noisy_img)
gaussian_psnr = peak_signal_noise_ratio(ref_img, gaussian_img)

print('PSNR of input noisy image = ', noise_psnr)
print('PSNR of input gaussian image = ', gaussian_psnr)

################################################################
from skimage.restoration import (denoise_tv_chambolle, denoise_bilateral,
                                 denoise_wavelet, estimate_sigma)

from skimage import img_as_float
from skimage.metrics import peak_signal_noise_ratio
import matplotlib.pyplot as plt
from skimage import io
from scipy import ndimage as nd

noisy_img = img_as_float(io.imread('images/MRI_noisy.tif'))

ref_img = img_as_float(io.imread('images/MRI_clean.tif'))

bilateral_img = denoise_bilateral(noisy_img, sigma_spatial=10, multichannel=False)

noise_psnr = peak_signal_noise_ratio(ref_img, noisy_img)
bilateral_psnr = peak_signal_noise_ratio(ref_img, bilateral_img)

plt.imshow(bilateral_img, cmap='gray')

###############
tv_img = denoise_tv_chambolle(noisy_img, weight=0.3, multichannel=False)

tv_psnr = peak_signal_noise_ratio(ref_img, tv_img)

plt.imshow(tv_img, cmap='gray')

#######################
wavelet_img = denoise_wavelet(noisy_img, multichannel=False,
                              method='BayesShrink', mode='soft',
                              rescale_sigma=True)

wavelet_psnr = peak_signal_noise_ratio(ref_img, wavelet_img)

print(wavelet_psnr)

plt.imshow(wavelet_img, cmap='gray')

###################################
from medpy.filter.smoothing import anisotropic_diffusion

noisy_img = img_as_float(io.imread('images/MRI_noisy.tif', as_gray=True))

ref_img = img_as_float(io.imread('images/MRI_clean.tif'))

aniso_img = anisotropic_diffusion(noisy_img, niter=50, kappa=50,
                                  gamma=0.2, option=2)
#play with kappa & gamma to optimize

aniso_psnr = peak_signal_noise_ratio(ref_img, aniso_img)

print(aniso_psnr)

plt.imshow(aniso_img, cmap='gray')

##################################
