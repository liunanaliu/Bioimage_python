##roberts - 2*2 matrix, highlight regions of high spatial gradient which often correspond to edges
##sobel - very similar to robert except with a 3*3 operator
##prewitt - similar to sobel, except for the operator values
##scharr
##farid

import cv2
img = cv2.imread('images/xxx.tif',0)

from skimage import roberts, sobel, scharr, prewitt
##ImportError: cannot import name 'roberts' from 'skimage'

robert_img = roberts(img)
sobel_img = sobel(img)
scharr_img = scharr(img)
prewitt_img = prewitt(img)

cv2.imshow('roberts',robert_img)


#####################################################
##candy edge detection filter
##step1 - noise reduction: typically with gaussian, while any denoising can be used
##step2 - gradient calculation: detect edges, typically along 4 directions, including 
##horizontal, vertical and 2 diagonals
##step3 - non-maximum suppression: thin out edges by finding pixels with max value in the edge direction
##step4 - double threshold: determine potential edges by double thresholding to obtain strong, weak and irrelevant pixels for edges
##step5 - edge tracking by hystersis: convert weak adge pixels to strong based on neighbouring pixels.

import cv2
import numpy as np

img = cv2.imread('images/xxx.tif',0)
canny_edge = cv2.Canny(img,50,80)
#provide threshold 1 and 2

#while which are optimal for threshold
#autocanny
sigma = 0.3
median = np.median(img)

lower = int(max(0, (1.0 - sigma) * median))
#if the value is below 0, then take 0 as the value of lower
upper = int(min(255, (1.0 + sigma) * median))
#if the value is larger than 255, then take 255 as the value of upper

auto_canny = cv2.Canny(img,lower,upper)

cv2.imshow('',auto_canny)
